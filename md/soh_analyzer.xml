<?xml version="1.0" encoding="utf-8"?>
<mdscript name="SoH_Analyzer" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <!-- Soh X4tress Analyzer script. This script Regularly analyzes the SoHGlobalEvents list from the SoH X4tress Observer and creates reportable Events from it. -->
  <!-- This script also removes processed or deprecated info from the SoHGlobalEvents list -->
  <cues>

    <!-- The result of this cue is a list of Processed Events. The structure of a Processed Event is:
    $eventName            (Table)     - The name of the event with metadata. $eventName as the key (e.g. $Battle of Litany Fury I). $eventNo as a number (TODO)
    $eventType            (String)    - Type of the processed Event (e.g. 'battle')
    $numberOfEvents       (Integer)   - Number of Global Events that are summarized in this Event
    $scale                (String)    - How large the Event is considered. (e.g. 'tiny', 'epic')
    $sector               (String)    - The sector the Event is associated with
    $numberOfParticipants (Integer)   - The number of units that participated in this Event
    $participants         (ShipInfo)  - list of the participants in this event, with '$ObjectId' as the key (E.g. '$RXM-030') and a ShipInfo table as a value
    $startTime            (Timestamp) - When the first Global Event of this Event occured
    $endTime              (Timestamp) - When the last Global Event of this Event occured
    $center               (Position)  - The positional centroid of this Event
    $majorEvents          (List)      - Major Events that occured in this Event. Objects in this list are of type GlobalEvent (see soh_observer.xml)
    $factions             (Table)     - List of participating factions. The key is '$' + factionName. The value is factionName
    -->

    <!-- The ShipInfo object is a table with the following structure:
      $shipId             (String)    - The '$ObjectId'
      $shipType           (String)    - The shiptype
      $shipFaction        (String)    - The ship faction
      $noOfKills          (Integer)   - The number of kills this unit scored in the event
    -->

    <cue name="SoHAnalyzeGlobalEvents" checkinterval="10min" instantiate="true">
      <conditions>
      </conditions>

      <actions>
        <set_value name="$StartTime" exact="player.age"/>
        <debug_text text="'Running SoHAnalyzeGlobalEvents at %1'.[$StartTime]"/>
        <!-- initialize the constants -->

        <set_value name="$Min_Size_Fight" exact="2"/>
        <set_value name="$Min_Size_Skirmish" exact="4"/>
        <set_value name="$Min_Size_Battle" exact="30"/>

        <!-- initalize the processed events list, if it does not yet exist -->
        <do_if value="not global.$SoHProcessedEvents?">
          <set_value name="global.$SoHProcessedEvents" exact="[]" />
        </do_if>

        <!-- initalize the eligible for renaming list, if it does not yet exist -->
        <do_if value="not global.$SoHEligibleForRenaming?">
          <set_value name="global.$SoHEligibleForRenaming" exact="table[]" />
        </do_if>

        <!-- initalize the event names table, if it does not yet exist -->
        <do_if value="not global.$SoHEventNames?">
          <set_value name="global.$SoHEventNames" exact="table[]" />
        </do_if>

        <!-- Split the global events by sector -->
        
        <set_value name="$SoHGlobalEventsBySector" exact="table[]" />
        <do_for_each name="$Event" in="@global.$SoHGlobalEvents">
          <set_value name="$Sector" exact="'$' + $Event.$sector" />
          <do_if value="not $SoHGlobalEventsBySector.{$Sector}?">
            <set_value name="$SoHGlobalEventsBySector.{$Sector}" exact="[]" />
          </do_if>
          <append_to_list name="$SoHGlobalEventsBySector.{$Sector}" exact="$Event" />
        </do_for_each>
        <debug_text text="'Collected %1 events in %2 sectors'.[@global.$SoHGlobalEvents.count, $SoHGlobalEventsBySector.keys.list.count]"/>

        <!-- Summarize the Global Events for each sector into Processed Events -->
        <do_for_each name="$SectorKey" in="$SoHGlobalEventsBySector">
          <set_value name="$SectorEvents" exact="$SoHGlobalEventsBySector.{$SectorKey}"/>
          <set_value name="$SoHSectorProcessedEvents" exact="[]" />

          <!-- For each GlobalEvent of this sector, check if it can be assigned to any Processed Event. If not, create a new Processed Event from it -->
          <do_for_each name="$SectorEvent" in="$SectorEvents">
            <run_actions ref="SoHBelongsToEvent" result="$ProcessedEvent">
              <param name="ProcessedEvents" value="$SoHSectorProcessedEvents"/>
              <param name="SectorEvent" value="$SectorEvent"/>
            </run_actions>
            <!-- If it does not belong to a processed Event, create a new one -->
            <!-- Fields that are left empty for now will be filled later in post processing or by other functions -->
            <do_if value="not $ProcessedEvent">
              <!--debug_text text="'Creating new Processed Event with Timestamp %1.'.[$SectorEvent.$timestamp]" /-->
              <set_value name="$Participants" exact="table[]"/>

              <set_value name="$ProcessedEvent" exact="table[$numberOfEvents = 1, $sector = $SectorEvent.$sector, $participants = $Participants,
                $startTime = $SectorEvent.$timestamp, $endTime = $SectorEvent.$timestamp, $center = $SectorEvent.$attackedPos, $majorEvents = [],
                $factions = table[{'$' + $SectorEvent.$attackerFaction} = $SectorEvent.$attackerFaction]]"/>
                <!-- Adding the Attacked faction separately. Otherwise there will be a duplicate key error, if a faction attacks its own -->
              <set_value name="$ProcessedEvent.$factions.{'$' + $SectorEvent.$attackedFaction}" exact="$SectorEvent.$attackedFaction" />

              <run_actions ref="SoHAddParticipant">
                <param name="ProcessedEvent" value="$ProcessedEvent"/>
                <param name="ParticipantId" value="$SectorEvent.$attackerId"/>
                <param name="ParticipantType" value="$SectorEvent.$attackerType"/>
                <param name="ParticipantFaction" value="$SectorEvent.$attackerFaction"/>
                <param name="ScoredKill" value="'SoHDestroyed' == $SectorEvent.$eventType"/>
              </run_actions>
              <run_actions ref="SoHAddParticipant">
                <param name="ProcessedEvent" value="$ProcessedEvent"/>
                <param name="ParticipantId" value="$SectorEvent.$attackedId"/>
                <param name="ParticipantType" value="$SectorEvent.$attackedType"/>
                <param name="ParticipantFaction" value="$SectorEvent.$attackedFaction"/>
                <param name="ScoredKill" value="false"/>
              </run_actions>

              <!-- if the currently evaluated event is considered major, add it for later detail reference -->
              <run_actions ref="SoHIsEventMajor" result="$isMajorEvent">
                <param name="SectorEvent" value="$SectorEvent"/>
              </run_actions>
              <do_if value="$isMajorEvent">
                <append_to_list name="$ProcessedEvent.$majorEvents" exact="$SectorEvent" />
              </do_if>
              
              <append_to_list name="$SoHSectorProcessedEvents" exact="$ProcessedEvent"/>
            </do_if>
          </do_for_each>

          <!-- Post Process and attach to the global list -->
          <do_for_each name="$ProcessedEvent" in="$SoHSectorProcessedEvents">
            <set_value name="$ProcessedEvent.$eventType" exact="'battle'" />
            <set_value name="$ProcessedEvent.$numberOfParticipants" exact="$ProcessedEvent.$participants.keys.list.count" />

            <!-- Check if the event made a unit become eligible for renaming -->
            <run_actions ref="SoHCheckRenamingPossibility">
              <param name="ProcessedEvent" value="$ProcessedEvent"/>
            </run_actions>

            <append_to_list name="global.$SoHProcessedEvents" exact="$ProcessedEvent" />
          </do_for_each>

          <!-- Clear temp lists -->
          <clear_list list="$SoHSectorProcessedEvents" />
        </do_for_each>

        

        <!-- remove the Global Event after processing (TODO: Find a better solution) -->
        <debug_text text="'Clearing Global Events'"/>
        <set_value name="$index" exact="1"/>
        <set_value name="$RemovalCounter" exact="0" />
        <!-- We can break out of the loop by checking the start time, as the list is sorted by time -->
        <!-- Index should always be one, as the elements move down -->
        <do_while value="$index lt global.$SoHGlobalEvents.count and global.$SoHGlobalEvents.{$index}.$timestamp lt $StartTime" >
          <remove_value name="global.$SoHGlobalEvents.{$index}" />
          <set_value name="$RemovalCounter" exact="$RemovalCounter + 1"/>
        </do_while>

        <debug_text text="'Finished processing events. Global Event count is now %1. Deleted %2 entries!'.[@global.$SoHGlobalEvents.count, $RemovalCounter]"/>
      </actions>
    </cue>
    

    <!-- Checks if a Global Event belongs to a Processed event and manipulates the processed Event if true. -->
    <library name="SoHBelongsToEvent" purpose="run_actions" >
      <params>
        <param name="ProcessedEvents"/>
        <param name="SectorEvent"/>
        <param name="Event_Max_Time" default="5min"/>
        <param name="Event_Max_Range" default="100km"/>
      </params>
      <actions>
        <!--debug_text text="'Comparing Event at %1 with %2 Processed Events'.[$SectorEvent.$timestamp, $ProcessedEvents.count]" /-->
        <do_for_each name="$ProcessedEvent" in="$ProcessedEvents">
          <!-- If it belongs to the Processed Event, update it and break out of the loop by returning the Event. -->
          <set_value name="$EventInTime" exact="($SectorEvent.$timestamp - $ProcessedEvent.$endTime) lt $Event_Max_Time"  />
          <set_value name="$EventInRange" exact="$SectorEvent.$attackedPos.distanceto.{$ProcessedEvent.$center} lt $Event_Max_Range" />
          <do_if value="$EventInTime and $EventInRange">
            <!-- debug_text text="'Updating Processed Event with Timestamp %1 to %2.'.[$ProcessedEvent.$endTime, $SectorEvent.$timestamp]" /-->
            <!-- Shift the Event centroid -->
            <run_actions ref="SoHShiftCentroid" >
              <param name="ProcessedEvent" value="$ProcessedEvent"/>
              <param name="SectorEvent" value="$SectorEvent"/>
            </run_actions>

            <!-- Update the timestamp -->
            <set_value name="$ProcessedEvent.$endTime" exact="$SectorEvent.$timestamp" />
            <!-- Add the Event participants if they do not yet exist -->
            <run_actions ref="SoHAddParticipant">
              <param name="ProcessedEvent" value="$ProcessedEvent"/>
              <param name="ParticipantId" value="$SectorEvent.$attackerId"/>
              <param name="ParticipantType" value="$SectorEvent.$attackerType"/>
              <param name="ParticipantFaction" value="$SectorEvent.$attackerFaction"/>
              <param name="ScoredKill" value="'SoHDestroyed' == $SectorEvent.$eventType"/>
            </run_actions>
            <run_actions ref="SoHAddParticipant">
              <param name="ProcessedEvent" value="$ProcessedEvent"/>
              <param name="ParticipantId" value="$SectorEvent.$attackedId"/>
              <param name="ParticipantType" value="$SectorEvent.$attackedType"/>
              <param name="ParticipantFaction" value="$SectorEvent.$attackedFaction"/>
              <param name="ScoredKill" value="false"/>
            </run_actions>
            <set_value name="$ProcessedEvent.$factions.{'$' + $SectorEvent.$attackerFaction}" exact="$SectorEvent.$attackerFaction"/>
            <set_value name="$ProcessedEvent.$factions.{'$' + $SectorEvent.$attackedFaction}" exact="$SectorEvent.$attackedFaction"/>

            <!-- Add the current Global / Sector Event as reference if it is considered major -->
            <run_actions ref="SoHIsEventMajor" result="$isMajorEvent">
              <param name="SectorEvent" value="$SectorEvent"/>
            </run_actions>
            <do_if value="$isMajorEvent">
              <append_to_list name="$ProcessedEvent.$majorEvents" exact="$SectorEvent" />
            </do_if>

            <!-- Update the Number of Events -->
            <set_value name="$ProcessedEvent.$numberOfEvents" exact="$ProcessedEvent.$numberOfEvents + 1" />
            <return value="$ProcessedEvent"/>
          </do_if>
      </do_for_each>
      <return value="null"/>
      </actions>
    </library>

    <!-- Shifts the center of the a Processed Event after a new Global Event was added. -->
    <library name="SoHShiftCentroid" purpose="run_actions">
      <params>
        <param name="ProcessedEvent"/>
        <param name="SectorEvent"/>
      </params>
      <actions>
        <set_value name="$numberOfEvents" exact="$ProcessedEvent.$numberOfEvents"/>
        <set_value name="$center" exact="$ProcessedEvent.$center" />
        <set_value name="$centerX" exact="($center.x * $numberOfEvents) + $SectorEvent.$attackedPos.x" />
        <set_value name="$centerY" exact="($center.y * $numberOfEvents) + $SectorEvent.$attackedPos.y" />
        <set_value name="$centerZ" exact="($center.z * $numberOfEvents) + $SectorEvent.$attackedPos.z" />

        <set_value name="$numberOfEvents" exact="$numberOfEvents + 1"/>
        <set_value name="$centerX" exact="$center.x / $numberOfEvents" />
        <set_value name="$centerY" exact="$center.y / $numberOfEvents" />
        <set_value name="$centerZ" exact="$center.z / $numberOfEvents" />

        <create_position name="$newCenter" x="$centerX" y="$centerY" z="$centerZ"/>

        <!--debug_text text="'Shifted Event centroid from %1 to %2'.[$center, $newCenter]"/-->
        <set_value name="$ProcessedEvent.$center" exact="$newCenter"/>

        <remove_value name="$center" />
      </actions>
    </library>

    <!-- Evaluates if the Event of type GlobalEvent is considered major (E.g. if a capital ship was destroyed).  -->
    <library name="SoHIsEventMajor" purpose="run_actions">
      <params>
        <param name="SectorEvent"/>
      </params>
      <actions>
        <do_if value="'SoHDestroyed' == $SectorEvent.$eventType and 
        shiptype.destroyer == $SectorEvent.$attackedType or
        shiptype.battleship == $SectorEvent.$attackedType or 
        shiptype.carrier == $SectorEvent.$attackedType or 
        shiptype.resupplier == $SectorEvent.$attackedType">
        <debug_text text="'SoHIsEventMajor returns true because %1 was destroyed.'.[$SectorEvent.$attackedType]"/>
          <return value="true"/>
        </do_if>
        <return value="false"/>
      </actions>
    </library>

    <!-- Evaluates if an event made a unit become eligible for renaming and adds it to the list, if so.  -->
    <library name="SoHCheckRenamingPossibility" purpose="run_actions">
      <params>
        <param name="ProcessedEvent"/>
      </params>
      <actions>
        <!-- Check all participants of the event for eligibility -->
        <do_for_each name="$UnitId" in="$ProcessedEvent.$participants">
          <set_value name="$Unit" exact="$ProcessedEvent.$participants.{$UnitId}" />
          <debug_text text="'Checking kills for Unit %1'.[$Unit]" />
          <do_if value="$Unit.$noOfKills > 30">
            <set_value name="$NewName" exact="'Slayer of ' + $ProcessedEvent.$sector"/>
          </do_if>
          <do_elseif value="$Unit.$noOfKills > 20">
            <set_value name="$NewName" exact="'Hero of ' + $ProcessedEvent.$sector"/>
          </do_elseif>
          <do_elseif value="$Unit.$noOfKills > 10">
            <set_value name="$NewName" exact="'Defender of ' + $ProcessedEvent.$sector"/>
          </do_elseif>

          <do_if value="$NewName?">
            <!-- Append the new name to the list, if the unit already has an entry. Otherwise create a new one -->
            <do_if value="global.$SoHEligibleForRenaming.{$UnitId}?">
              <append_to_list name="global.$SoHEligibleForRenaming.{$UnitId}" exact="$NewName"/>
            </do_if>
            <do_else>
              <set_value name="global.$SoHEligibleForRenaming.{$UnitId}" exact="[$NewName]"/>
            </do_else>
            <debug_text text="'Added new name %2 to eligibility list for %1!'.[$Unit.$shipId, $NewName]" />
          </do_if>
          <remove_value name="$NewName" />
        </do_for_each>
      </actions>
    </library>

    <!-- Adds a participant to a processed Event. Also adds a kill if selected  -->
    <library name="SoHAddParticipant" purpose="run_actions">
      <params>
        <param name="ProcessedEvent"/>
        <param name="ParticipantId"/>
        <param name="ParticipantType"/>
        <param name="ParticipantFaction"/>
        <param name="ScoredKill" />
      </params>
      <actions>
        <!-- Check if the participant already exists in the event -->
        <set_value name="$ParticipantExists" exact="$ProcessedEvent.$participants.{'$' + $ParticipantId}?" />
        <do_if value="not $ParticipantExists">
          <!-- If it does not exist, add it -->
          <set_value name="$ProcessedEvent.$participants.{'$' + $ParticipantId}" exact="table[{'$shipId'} = $ParticipantId, {'$shipType'} = $ParticipantType, {'$shipFaction'} = $ParticipantFaction, {'$noOfKills'} = 0]"/>
        </do_if>

        <!-- If it scored a kill, add the kill -->
        <do_if value="$ScoredKill == true">
          <set_value name="$ProcessedEvent.$participants.{'$' + $ParticipantId}.$noOfKills" exact="($ProcessedEvent.$participants.{'$' + $ParticipantId}.$noOfKills) + 1"/>
          <debug_text text="'Added kill for %1.'.[$ParticipantId]"/>
        </do_if>
      </actions>
    </library>

  </cues>
</mdscript>